[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_covered = true
show_missing = true
precision = 1

exclude_also = [
    # Exclude code-blocks that are only used during (pyright) type-checking
    "^if TYPE_CHECKING:",
]

[tool.coverage.xml]
output = "cov.xml"

[tool.isort]
profile = "black"

[tool.pyright]
# Used since `strict = [...]` prevents individual `reportX` settings:
include = ["paleomix", "tests"]
# typeCheckingMode = "strict"

# FIXME: Disabled until project is fully typed
reportUnnecessaryIsInstance = "none"

[tool.pytest.ini_options]
markers = ["slow"]

[tool.ruff]
target-version = "py37"

[tool.ruff.lint]
select = [
    # "A",   # flake8-builtins
    # "ANN", # flake8-annotations
    # "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",    # flake8-comprehensions
    # "C90", # mccabe -- complexity measured disabled for now
    # "CPY", # flake8-copyright -- requires `--preview`
    "DTZ", # flake8-datetimez
    "E",     # Error
    "EXE",   # flake8-executable
    "F",     # Pyflakes
    "FA",    # flake8-future-annotations
    # "FBT", # flake8-boolean-trap
    # "FIX", # flake8-fixme
    "FLY",   # flynt
    # "FURB",# refurb -- requires --preview
    "G",     # flake8-logging-format
    "I",     # isort
    "INP",   # flake8-no-pep420
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    # "PTH", # flake8-use-pathlib -- long term goal
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    # "RUF", # Ruff-specific rules
    # "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    # "TRY", # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle warnings
    "YTT",   # flake8-2020
]

ignore = [
    "ANN101",  # missing-type-self -- Missing type annotation for `self` in method
    "ANN102",  # missing-type-cls -- Missing type annotation for `cls` in classmethod
    "S603",    # subprocess-without-shell-equals-true
    "TRY003",  # raise-vanilla-args
    # Disabled due to too many false positives
    "PLR2004", # magic-value-comparison -- Magic value used in comparison
    # Disabled due to personal style preferences
    "PLW2901", # redefined-loop-name -- `for` loop variable `value` overwritten
    "RET505",  # superfluous-else-return -- Unnecessary `elif` after `return` statement
    "RET506",  # superfluous-else-raise -- Unnecessary `elif` after `raise` statement
    "RET507",  # superfluous-else-continue --Unnecessary `elif` after `continue`
    "RET508",  # superfluous-else-break -- Unnecessary `elif` after `break` statement
    # Disabled due to hits in non-performance critical code where manual is clearer
    "PERF401", # manual-list-comprehension -- Use a list comprehension
    # Disabled due to conflict with `format` command
    "ISC001",  # single-line-implicit-string-concatenation
    # Complexity warnings disabled for now
    "PLR0904", # too-many-public-methods
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "PLR0916", # too-many-boolean-expressions
]

[tool.ruff.lint.per-file-ignores]

"tests/**.py" = [
    "S101", # assert -- Use of assert detected
    "S108", # hardcoded-temp-file -- Probable insecure usage of temporary file or dir
    "S311", # suspicious-non-cryptographic-random-usage
]
